create TABLE flights (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              origin TEXT NOT NULL,
              destination TEXT NOT NULL,
              duration CHAR NOT NULL
         );

INSERT INTO flights
       (origin,destination, duration)
       VALUES("NEW YORK", "London", 415);

get data out of table:
            SELECT * FROM FLIGHTS
            SELECT origin, destination FROM flights;

for particular rows only
             SELECT * FROM flights WHERE id = 3;
             SELECT * FROM flights WHERE origin = "NEW YORK";

to see tables in sql command
             .tables

to present data in a beautiful manner, command is:
             .mode columns
             .headers yes

sql command:(for arithmetic expressions)
   select * from <sql-file-name> where duration > 300;

comparison commands:
   select * from flights where duration > 500 AND destination = "PARIS";
      select * from flights where duration > 500 OR destination = "PARIS";

to join two tables:
   SELECT first, origin, destination 
     FROM flights JOIN passengers 
     ON passengers.flights_id = flights.id;

-JOIN / INNER JOIN
-LEFT OUTER JOIN
-RIGHT OUTER JOIN
-FULL OUTER JOIN

optimization:
  CREATE INDEX name_index ON passengers (column_name);

SQL Injection

If username is:
  hacker"--
what happens is that 

SELECT * FROM users WHERE username = "hacker"--" AND password = "";

in SQL -- is the comment symbol like in python we have #
AND THE HACKER CAN ACCESS ALL THE USERNAME AND PASSWORDS.

To avoid this we can add \.
but in django we have models for this.

 race conditions:
    conflicts happen when multiple thing happens simultaneously.
    ex: liking a post on instagram.